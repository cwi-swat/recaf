package generated;
import java.util.concurrent.ExecutionException;

import recaf.demo.cps.StreamExt;
import rx.Observable;
import rx.Subscription;
import rx.functions.Action1;

public class TestSimpleStream {
  
  private recaf StreamExt<Integer> alg = new StreamExt<Integer>();
  
  /*
  recaf Stream<Integer> scan(Stream<Integer> src, Integer state, Integer acc) {
   yield! state;
   awaitFor(Integer next : src) {
     try {
        yield! (await accumulateAsync(state, next));
     } catch(e) {
        return; 
     }
  }
  */ 
 
  recaf Observable<Integer> simpleStream() {
    yield! 1;
    yield! 2;
    yield! 3;
    yield! 4;
    yield! 5;
  }  
  
  public static void main(String args[]) throws InterruptedException, ExecutionException {
	Subscription sub = new TestSimpleStream().simpleStream().subscribe(new Action1<Integer>() {
        @Override
        public void call(Integer s) {
              System.out.println(s);
        }
    });
  }
}
