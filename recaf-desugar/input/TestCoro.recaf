
import recaf.coro.Coro;
import java.util.stream.IntStream;
import java.util.Iterator;
import java.util.function.Predicate;
import java.util.function.*;

public class TestCoro {

  // todo: same fringe problem.
  static Void println(Object o) {
    System.out.println(o);
    return null;
  }
  
  Iterable<Integer> range(int n) {
    return new Iterable<Integer>() {
       public Iterator<Integer> iterator() {
         return IntStream.range(0, n).iterator();
       }
    };
  }

  [Coro<Integer>] 
  Iterable<Integer> filter(Iterable<Integer> iter, Predicate<Integer> pred) {
    for (Integer t: iter) {
      if (pred.test(t)) {
         yield! t;
      }
    }
  }

  [Coro<Integer>] 
  Iterable<Integer> map(Iterable<Integer> iter, Function<Integer, Integer> f) {
    for (Integer t: iter) {
         yield! f(t);
    }
  }

  [Coro<Integer>] 
  Iterable<Integer> subCoro() {
     for (Integer i: range(10)) {
        yield! i;
     }
  }

  [Coro<Integer>] 
  Iterable<Integer> coro() {
     while (true) {
        // key point here: cannot always pass through the same alg.
        yieldFrom! filter(subCoro(), x -> ((Integer)x) % 2 == 0);
     }
  }
  
  public static void main(String args[]) {
    for (Integer i: new TestCoro().coro()) {
      System.out.println("i = " + i);
    }
  }

}