package generated;
import java.util.concurrent.ExecutionException;
import java.util.function.Consumer;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import recaf.demo.cps.Async;
import recaf.demo.cps.StreamExt;
import rx.Observable;
import rx.Subscription;
import rx.observers.TestSubscriber; 

public class TestStream_Complex {

   CompletableFuture<Integer> accumulateAsync(recaf Async<Integer> alg, Integer state, Integer next) {
      return state + next;
   }  
 
   Observable<Integer> scan(recaf StreamExt<Integer> alg, 
   						    Observable<Integer> src, 
   						    Integer state) {
     yield! state; 
     awaitFor(Integer next : src) {
       Integer x = await! accumulateAsync(new Async<Integer>(){}, state, next);
       yield! x;
       state = x;
	 }
  }
  
  Observable<Integer> simpleStream(recaf StreamExt<Integer> alg) {
      yield! 1;
      yield! 2;
      yield! 3; 
      yield! 4;
      yield! 5;
  } 
  
  public static void main(String args[]) throws InterruptedException, ExecutionException {	  
		TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>();

		Subscription sub = new TestStream_Complex()
				.scan(new StreamExt<Integer>(), new TestStream_Complex().simpleStream(new StreamExt<Integer>()), 0)
				.take(6)
				.subscribe(testSubscriber);

		testSubscriber.awaitTerminalEvent();
		List<Integer> ret = testSubscriber.getOnNextEvents();
		ret.forEach(new Consumer<Integer>() {
			@Override
			public void accept(Integer t) {
				System.out.println(t);
			}
		});
  }
}
