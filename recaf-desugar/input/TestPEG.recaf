package generated;

import recaf.demo.pegs.MemoPEG;
import recaf.demo.pegs.PEG;
import recaf.demo.pegs.PEGwithLayout;
import recaf.demo.pegs.Parser;

public class TestPEG {

  abstract class Exp { }
  
  class BinOp extends Exp {
    String op; Exp lhs, rhs;
    BinOp(String op, Exp lhs, Exp rhs) {
      this.op = op;
      this.lhs = lhs;
      this.rhs = rhs;
    }
    @Override
    public String toString() {
        return "(" + lhs + op + rhs + ")";
    }
  }
  
  class Int extends Exp {
    int value;
    Int(int n) {
      this.value = n;
    }
    @Override
    public String toString() {
        return "" + value;
    }
  }
  
  class XML extends Exp {
    Exp exp;
    XML(Exp exp) {
      this.exp = exp;
    }
    
    @Override
    public String toString() {
      return "<xml>" + exp + "</xml>";
    }
  }
  
  private final recaf PEG<Exp> alg;
  
  TestPEG(PEG<Exp> alg) {
    this.alg = alg;
  }
  
  recaf Parser<Exp> exp() {
    let Exp e = sum();
    return e;
  }

  recaf Parser<Exp> sum() {
    let Exp v1 = product();
    star Exp exp = (v1) {
      regexp String op = "[+\\-]";
      let Exp v2 = product();
      return new BinOp(op, exp, v2);
    }
    return exp;
  }
  
  
  recaf Parser<Exp> xml(String tag) {
    lit! "<" + tag + ">";
    let Exp e = exp();
    lit! "</" + tag + ">";
    return new XML(e); 
  }
  
  recaf Parser<Exp> product() {
    let Exp v1 = value();
    star Exp exp = (v1) {
      regexp String op = "[*/]";
      let Exp v2 = value();
      return new BinOp(op, exp, v2);
    }
    return exp;
  }
  
  recaf Parser<Exp> value() {
    choice {
     alt "value":
      regexp String n = "[0-9]+";
      return new Int(Integer.parseInt(n));
      
     alt "xml":
       let Exp e = xml("xml");
       return e;
      
     alt "bracket":
      lit! "(";
      let Exp e = exp();
      lit! ")";
      return e;
    }
  }
  
  public static String genExp(int n)  {
    if (n == 0) {
      return "1";
    }
    if (n % 2 == 0) {
	    return genExp(n - 1) + "+" + genExp(n - 1);
	}
	return genExp(n - 1) + "*" + genExp(n - 1);
  }
  
  public static void main(String args[]) {
    Parser<Exp> p = new TestPEG(new PEG<Exp>() {}).exp();
    System.out.println(p.parse("<xml>(1+2)*(3+4)</xml>", 0).getValue());
    
    p = new TestPEG(new PEG<Exp>() {}).exp();
    System.out.println(p.parse("(1+2)*(3+4)", 0).getValue());
    
    p = new TestPEG(new MemoPEG<Exp>()).exp();
    System.out.println(p.parse("(1+2)*(3+4)", 0).getValue());
    
    p = new TestPEG(new PEGwithLayout<Exp>("[\\ \\t\\n]*")).exp();
    System.out.println(p.parse("(1 + 2) * (3 + 4)", 0).getValue());
    
    
    System.out.println("Generating genExp(20)");
    String big = genExp(5);
    System.out.println(big);
    
    System.out.println("NO memo");
    p = new TestPEG(new PEG<Exp>() {}).exp();
    //System.out.println(p.parse(big, 0).getValue());
    
    System.out.println("WITH memo");
    p = new TestPEG(new MemoPEG<Exp>()).exp();
    //System.out.println(p.parse(big, 0).getValue());
    System.out.println("done");
    
  }
  
}