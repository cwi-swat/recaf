package generated;

import recaf.demo.pegs.MemoPEG;
import recaf.demo.pegs.PEG;
import recaf.demo.pegs.PEGwithLayout;
import recaf.demo.pegs.Parser;

public class TestPEG {

  abstract class Exp { }
  
  class Bin extends Exp {
    String op; Exp lhs, rhs;
    Bin(String op, Exp lhs, Exp rhs) {
      this.op = op;
      this.lhs = lhs;
      this.rhs = rhs;
    }
    @Override
    public String toString() {
        return "(" + lhs + op + rhs + ")";
    }
  }
  
  class Int extends Exp {
    int value;
    Int(String n) {
      this.value = Integer.parseInt(n);
    }
    @Override
    public String toString() {
        return "" + value;
    }
  }
  
  class XML extends Exp {
    Exp exp;
    String tag;
    XML(String tag, Exp exp) {
      this.tag = tag;
      this.exp = exp;
    }
    
    @Override
    public String toString() {
      return "<" + tag + ">" + exp + "</" + tag + ">";
    }
  }
  
  private final recaf PEG<Exp> alg;
  
  TestPEG(PEG<Exp> alg) {
    this.alg = alg;
  }
  
  recaf Parser<Exp> exp() {
    let Exp e = addSub();
    return e;
  }

  recaf Parser<Exp> xml(String tag) {
    lit! "<" + tag + ">";
    let Exp e = exp();
    lit! "</" + tag + ">";
    return new XML(tag, e); 
  }
  
  
//BEGIN_PARSER_ADDSUB
  recaf Parser<Exp> addSub() {
    let Exp l = mulDiv();
    star Exp e = (l) {
      regexp String o = "[+\\-]";
      let Exp r = mulDiv();
      return new Bin(o, e, r);
    }
    return e;
  }
//END_PARSER_ADDSUB

//BEGIN_PARSER_MULDIV
  recaf Parser<Exp> mulDiv() {
    let Exp l = primary();
    star Exp e = (l) {
      regexp String o = "[*/]";
      let Exp r = primary();
      return new Bin(o, e, r);
    }
    return e;
  }
//END_PARSER_MULDIV
  
//BEGIN_PARSER_PRIMARY
  recaf Parser<Exp> primary() {
    choice {
      alt "value":
        regexp String n = "[0-9]+";
        return new Int(n);
      alt "bracket":
        lit! "("; let Exp e = addSub(); lit! ")";
        return e;
    }
  }
//END_PARSER_PRIMARY
  
  public static String genExp(int n)  {
    if (n == 0) {
      return "1";
    }
    if (n % 2 == 0) {
	    return genExp(n - 1) + "+" + genExp(n - 1);
	}
	return genExp(n - 1) + "*" + genExp(n - 1);
  }
  
  public static void main(String args[]) {
    //Parser<Exp> p = new TestPEG(new PEG<Exp>() {}).exp();
    //System.out.println(p.parse("<xml>(1+2)*(3+4)</xml>", 0).getValue());
    
    Parser<Exp> p = new TestPEG(new PEG<Exp>() {}).exp();
    System.out.println(p.parse("(1+2)*(3+4)", 0).getValue());
    
    p = new TestPEG(new MemoPEG<Exp>()).exp();
    System.out.println(p.parse("(1+2)*(3+4)", 0).getValue());
    
    p = new TestPEG(new PEGwithLayout<Exp>("[\\ \\t\\n]*")).exp();
    System.out.println(p.parse("(1 + 2) * (3 + 4)", 0).getValue());
    
    
    System.out.println("Generating genExp(20)");
    String big = genExp(5);
    System.out.println(big);
    
    System.out.println("NO memo");
    p = new TestPEG(new PEG<Exp>() {}).exp();
    //System.out.println(p.parse(big, 0).getValue());
    
    System.out.println("WITH memo");
    p = new TestPEG(new MemoPEG<Exp>()).exp();
    //System.out.println(p.parse(big, 0).getValue());
    System.out.println("done");
    
  }
  
}