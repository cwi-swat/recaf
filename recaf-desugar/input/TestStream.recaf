package generated;
import java.util.concurrent.ExecutionException;

import recaf.demo.cps.StreamExt;
import recaf.demo.cps.stream.Stream;

public class TestStream {
  
  private recaf StreamExt<Integer> alg = new StreamExt<Integer>();
 
  /*
  recaf Stream<Integer> scan(Stream<Integer> src, Integer state, Integer acc) {
   yield! state;
   awaitFor(Integer next : src) {
     try {
        yield! (await accumulateAsync(state, next));
     } catch(e) {
        return; 
     }
  }
  */
   
  recaf Stream<Integer> simpleStream() {
    yield! 1;
    yield! 2;
    yield! 3;
    yield! 4;
    yield! 5;
  }  
  
  /*  
  recaf void consumeStream() {
     awaitFor (Integer x: asyncRange()) {
       System.out.println(x);
     }
  }
 */ 
  
  public static void main(String args[]) throws InterruptedException, ExecutionException {
	new TestStream().simpleStream();
  }

}
