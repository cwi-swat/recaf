package generated;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.CompletableFuture;

import recaf.demo.cps.Async;
import recaf.demo.cps.StreamExt;
import rx.Observable;
import rx.Subscription;
import rx.functions.Action1;

public class TestStream_with_await {
   
  CompletableFuture<Integer> secondOp(recaf Async<Integer> alg) {
      if (1 < 2) { 	
   	    return 42;
  	  }
  	  return 41;
  }
  
  Observable<Integer> simpleStream2(recaf StreamExt<Integer> alg) {
      yield! 1;
      yield! 2;
      Integer x = await! secondOp(new Async<Integer>(){});
      yield! x;
      yield! 4;
      yield! 5;
  } 
  
  public static void main(String args[]) throws InterruptedException, ExecutionException {
	Subscription sub = new TestStream_with_await().simpleStream2(new StreamExt<Integer>()).subscribe(new Action1<Integer>() {
        @Override
        public void call(Integer s) {
              System.out.println(s);
        }
    });
  }
}
