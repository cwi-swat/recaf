import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import recaf.async.AsyncExtension;
 
public class TestAsyncComplex {

	public static Void pause(long sleeptime) {
	    try {
    	    Thread.sleep(sleeptime);
    	} catch (InterruptedException ex) {	}
    	return null;
	}
	
	public static Void print(String msg) {
		System.out.println(msg);		
		return null;
	}

    [AsyncExtension<Integer>]   
	CompletableFuture<Integer> op() {
    	if (1 < 2) {	
    		pause(2500);
    		print("delayed op");
       		return 42; 
     	}
     	return 41;
  	}

    [AsyncExtension<Integer>]   
	CompletableFuture<Integer> op2() {
    	if (1 < 2) {
       		await Integer x = op();
    		await Integer y = op();
    		return x + y;
     	}
     	pause(5000);
     	return 41;
  	}
  	
  	public static void main(String[] args) throws InterruptedException, ExecutionException{
  		CompletableFuture answer;
  				
  		answer = new TestAsyncComplex().op2();
			
		print("main");
		
  		System.out.println(answer.get());
  	}
}