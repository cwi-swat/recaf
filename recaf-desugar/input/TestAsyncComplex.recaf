import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import recaf.async.AsyncExtension;
 
public class TestAsyncComplex {

	public static Void pause(long sleeptime) {
	    try {
    	    Thread.sleep(sleeptime);
    	} catch (InterruptedException ex) {	}
    	return null;
	}
	
	public static Void print(String msg) {
		System.out.println(msg);		
		return null;
	}

	CompletableFuture<Integer> op(@Builder AsyncExtension<Integer> alg) {
    	if (1 < 2) {	
    		pause(2500);
    		print("delayed op");
       		return 42; 
     	}
     	return 41;
  	}

	CompletableFuture<Integer> op2(@Builder AsyncExtension<Integer> alg) {
    	if (1 < 2) {
    		//x = await op(alg)
    		//y = await op(alg)
    		//return x + y;
       		await(Integer x : op(alg)) {
       		 await(Integer y: op(alg)) { 
       		   return x + y; 
       		 } 
       		}
     	}
     	pause(5000);
     	return 41;
  	}
  	
  	public static void main(String[] args) throws InterruptedException, ExecutionException{
  		CompletableFuture answer;
  				
  		answer = new TestAsyncComplex().op2(new AsyncExtension<Integer>());
			
		print("main");
		
  		System.out.println(answer.get());
  	}
}