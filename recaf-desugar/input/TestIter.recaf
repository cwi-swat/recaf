package generated;
import recaf.demo.cps.Iter; 
import java.util.stream.IntStream;
import java.util.Iterator;
import java.util.function.Predicate;

public class TestIter {
  private static recaf Iter<Integer> alg = new Iter<Integer>();  
  
  Iterable<Integer> range(int n) {
    return new Iterable<Integer>() {
       public Iterator<Integer> iterator() {
         return IntStream.range(0, n).iterator();
       }
    };
  }

  recaf Iterable<Integer> filter(Iterable<Integer> iter, Predicate<Integer> pred) {
    for (Integer t: iter) {
      if (pred.test(t)) {
         yield! t;
      }
    }
  }

  recaf Iterable<Integer> subIter() {
     for (Integer i: range(10)) {
        yield! i;
     }
  }

  recaf Iterable<Integer> myIter() {
     while (true) {
        yieldFrom! filter(subIter(), x -> ((Integer)x) % 2 == 0);
     }
  }
  
  public static void main(String args[]) {
    for (Integer i: new TestIter().myIter()) {
      System.out.println("i = " + i);
    }
  }

}
