package generated;

import java.util.List;
import java.util.ArrayList;
import recaf.backtrack.Backtrack;
import static java.util.Arrays.asList;
import java.util.stream.IntStream;
import java.util.Iterator;

public class TestBacktracking {

  static class Pair {
    int x, y;
    Pair(int x, int y) {
      this.x = x;
      this.y = y;
    }
    public String toString() {
      return "(" + x + ", " + y + ")";
    }
  }

  static List<Pair> solve(recaf Backtrack<Pair> alg) {
     choose Integer x = asList(1, 2, 3);
     System.err.println("Choice 1: " + x);
     choose Integer y = asList(4, 5, 6);
     System.err.println("Choice 2: " + y);
     guard! x * y == 8; 
     return new Pair(x, y);
  }
  
  static Iterable<Integer> range(int n) {
    return new Iterable<Integer>() {
       public Iterator<Integer> iterator() {
         return IntStream.range(0, n).iterator();
       }
    };
  }
  
  static List<Pair> eightQueens(recaf Backtrack<Pair> alg) {
     List x = new ArrayList();
     for (Integer column: range(8)) {
       choose Integer row = range(8);
       for (Integer i: range(column)) {
         guard! (Integer)x.get(i) != row;
         guard! (Integer)x.get(i) != row + column - i;
         guard! (Integer)x.get(i) != row + i - column;
       }
       x.set(column, row);
     }
  }
  
  public static void main(String args[]) {
    System.out.println(solve(new Backtrack<Pair>()));
  }
  

}